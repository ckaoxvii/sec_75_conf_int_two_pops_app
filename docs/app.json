[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\n\nui <- page_fillable(\n  title = \"Confidence Interval for Two Population Proportions\",\n  theme = bs_theme(primary = \"#A90533\"),\n  \n  # App title\n  div(\n    style = \"text-align: left; margin-bottom: 20px; background-color: #A90533; padding: 20px; border-radius: 5px;\",\n    h1(\"Confidence Interval for Two Population Proportions\", \n       style = \"color: white; font-weight: bold; margin: 0;\")\n  ),\n  \n  card(\n    card_header(\n      \"Input Parameters\",\n      style = \"background-color: #A90533; color: white; font-weight: bold;\"\n    ),\n    \n    tabsetPanel(\n      id = \"input_type\",\n      \n      tabPanel(\"Count Input\",\n        br(),\n        layout_columns(\n          col_widths = c(4, 4, 4),\n          \n          div(\n            h4(\"Sample 1\"),\n            numericInput(\"count1\", \n                         \"Number of Successes:\", \n                         value = 50, \n                         min = 0, \n                         step = 1),\n            numericInput(\"total1\", \n                         \"Sample Size:\", \n                         value = 100, \n                         min = 1, \n                         step = 1)\n          ),\n          \n          div(\n            h4(\"Sample 2\"),\n            numericInput(\"count2\", \n                         \"Number of Successes:\", \n                         value = 30, \n                         min = 0, \n                         step = 1),\n            numericInput(\"total2\", \n                         \"Sample Size:\", \n                         value = 80, \n                         min = 1, \n                         step = 1)\n          ),\n          \n          div(\n            h4(\"Confidence Level\"),\n            numericInput(\"confidence_level_count\", \n                         \"Confidence Level (%):\", \n                         value = 95, \n                         min = 1, \n                         max = 99.9, \n                         step = 0.1)\n          )\n        )\n      ),\n      \n      tabPanel(\"Proportion Input\",\n        br(),\n        layout_columns(\n          col_widths = c(4, 4, 4),\n          \n          div(\n            h4(\"Sample 1\"),\n            numericInput(\"prop1\", \n                         \"Sample Proportion:\", \n                         value = 0.5, \n                         min = 0, \n                         max = 1, \n                         step = 0.001),\n            numericInput(\"total1_prop\", \n                         \"Sample Size:\", \n                         value = 100, \n                         min = 1, \n                         step = 1)\n          ),\n          \n          div(\n            h4(\"Sample 2\"),\n            numericInput(\"prop2\", \n                         \"Sample Proportion:\", \n                         value = 0.375, \n                         min = 0, \n                         max = 1, \n                         step = 0.001),\n            numericInput(\"total2_prop\", \n                         \"Sample Size:\", \n                         value = 80, \n                         min = 1, \n                         step = 1)\n          ),\n          \n          div(\n            h4(\"Confidence Level\"),\n            numericInput(\"confidence_level_prop\", \n                         \"Confidence Level (%):\", \n                         value = 95, \n                         min = 1, \n                         max = 99.9, \n                         step = 0.1)\n          )\n        )\n      )\n    )\n  ),\n  \n  card(\n    card_header(\n      \"Results\",\n      style = \"background-color: #A90533; color: white; font-weight: bold;\"\n    ),\n    tableOutput(\"results_table\")\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Validate inputs for count tab\n  observeEvent(c(input$count1, input$total1), {\n    if (!is.null(input$count1) && !is.null(input$total1)) {\n      if (input$count1 > input$total1) {\n        updateNumericInput(session, \"count1\", value = input$total1)\n      }\n    }\n  })\n  \n  observeEvent(c(input$count2, input$total2), {\n    if (!is.null(input$count2) && !is.null(input$total2)) {\n      if (input$count2 > input$total2) {\n        updateNumericInput(session, \"count2\", value = input$total2)\n      }\n    }\n  })\n  \n  # Sync confidence level between tabs\n  observeEvent(input$confidence_level_count, {\n    updateNumericInput(session, \"confidence_level_prop\", value = input$confidence_level_count)\n  })\n  \n  observeEvent(input$confidence_level_prop, {\n    updateNumericInput(session, \"confidence_level_count\", value = input$confidence_level_prop)\n  })\n  \n  # Calculate results\n  results <- reactive({\n    # Get confidence level based on active tab\n    confidence_level <- if (input$input_type == \"Count Input\") {\n      req(input$confidence_level_count)\n      input$confidence_level_count\n    } else {\n      req(input$confidence_level_prop)\n      input$confidence_level_prop\n    }\n    \n    # Get values based on active tab\n    if (input$input_type == \"Count Input\") {\n      req(input$count1, input$total1, input$count2, input$total2)\n      \n      # Basic validation\n      if (input$total1 <= 0 || input$total2 <= 0) return(NULL)\n      if (input$count1 < 0 || input$count2 < 0) return(NULL)\n      if (input$count1 > input$total1 || input$count2 > input$total2) return(NULL)\n      \n      # Calculate proportions\n      p1 <- input$count1 / input$total1\n      p2 <- input$count2 / input$total2\n      count1 <- input$count1\n      count2 <- input$count2\n      total1 <- input$total1\n      total2 <- input$total2\n      \n    } else {\n      req(input$prop1, input$total1_prop, input$prop2, input$total2_prop)\n      \n      # Basic validation\n      if (input$total1_prop <= 0 || input$total2_prop <= 0) return(NULL)\n      if (input$prop1 < 0 || input$prop2 < 0 || input$prop1 > 1 || input$prop2 > 1) return(NULL)\n      \n      # Use proportions directly\n      p1 <- input$prop1\n      p2 <- input$prop2\n      count1 <- round(input$prop1 * input$total1_prop)\n      count2 <- round(input$prop2 * input$total2_prop)\n      total1 <- input$total1_prop\n      total2 <- input$total2_prop\n    }\n    \n    # Sample difference (p1 - p2)\n    sample_diff <- p1 - p2\n    \n    # Standard error for difference of proportions\n    se <- sqrt((p1 * (1 - p1) / total1) + (p2 * (1 - p2) / total2))\n    \n    # Critical value (z-score)\n    alpha <- (100 - confidence_level) / 100\n    z_crit <- qnorm(1 - alpha/2)\n    \n    # Confidence interval\n    margin_error <- z_crit * se\n    lower_limit <- sample_diff - margin_error\n    upper_limit <- sample_diff + margin_error\n    \n    # Return results as a wide format data frame\n    data.frame(\n      `Count 1` = count1,\n      `Total 1` = total1,\n      `Count 2` = count2,\n      `Total 2` = total2,\n      `Sample Difference` = round(sample_diff, 6),\n      `Standard Error` = round(se, 6),\n      `Lower Limit` = round(lower_limit, 6),\n      `Upper Limit` = round(upper_limit, 6),\n      check.names = FALSE\n    )\n  })\n  \n  output$results_table <- renderTable({\n    results()\n  }, striped = TRUE, hover = TRUE, bordered = TRUE)\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
